import random

def display_board(board):
    """Displays the Tic-Tac-Toe board."""
    print("---------")
    print("| " + board[0] + " | " + board[1] + " | " + board[2] + " |")
    print("---------")
    print("| " + board[3] + " | " + board[4] + " | " + board[5] + " |")
    print("---------")
    print("| " + board[6] + " | " + board[7] + " | " + board[8] + " |")
    print("---------")

def player_input():
    """Gets the player's choice of X or O."""
    marker = ''
    while not (marker == 'X' or marker == 'O'):
        marker = input("Player 1, do you want to be X or O? ").upper()

    if marker == 'X':
        return ('X', 'O')
    else:
        return ('O', 'X')

def place_marker(board, marker, position):
    """Places the marker on the board."""
    board[position - 1] = marker

def win_check(board, mark):
    """Checks if the given marker has won."""
    return ((board[0] == mark and board[1] == mark and board[2] == mark) or  # across the top
            (board[3] == mark and board[4] == mark and board[5] == mark) or  # across the middle
            (board[6] == mark and board[7] == mark and board[8] == mark) or  # across the bottom
            (board[0] == mark and board[3] == mark and board[6] == mark) or  # down the left side
            (board[1] == mark and board[4] == mark and board[7] == mark) or  # down the middle
            (board[2] == mark and board[5] == mark and board[8] == mark) or  # down the right side
            (board[0] == mark and board[4] == mark and board[8] == mark) or  # diagonal
            (board[2] == mark and board[4] == mark and board[6] == mark))  # diagonal

def choose_first():
    """Randomly chooses who goes first."""
    if random.randint(0, 1) == 0:
        return 'Computer'
    else:
        return 'Player'

def space_is_free(board, position):
    """Checks if a space on the board is free."""
    return board[position - 1] == ' '

def get_player_choice(board):
    """Gets the player's next position choice."""
    position = 0
    while position not in range(1, 10) or not space_is_free(board, position):
        try:
            position = int(input("Choose a position (1-9): "))
        except ValueError:
            print("Invalid input. Please enter a number between 1 and 9.")
    return position

def minimax(board, depth, maximizingPlayer):
    """Minimax algorithm for AI decision making."""
    if win_check(board, 'O'):
        return -10  # Computer loses
    elif win_check(board, 'X'):
        return 10  # Computer wins
    elif ' ' not in board:
        return 0  # It's a tie

    if maximizingPlayer:
        bestVal = -float('inf')
        for i in range(9):
            if board[i] == ' ':
                board[i] = 'X'
                value = minimax(board, depth + 1, False)
                board[i] = ' '  # Undo the move
                bestVal = max(bestVal, value)
        return bestVal
    else:
        bestVal = float('inf')
        for i in range(9):
            if board[i] == ' ':
                board[i] = 'O'
                value = minimax(board, depth + 1, True)
                board[i] = ' '  # Undo the move
                bestVal = min(bestVal, value)
        return bestVal

def find_best_move(board):
    """Finds the best move for the AI using Minimax."""
    bestVal = -float('inf')
    bestMove = -1
    for i in range(9):
        if board[i] == ' ':
            board[i] = 'X'
            moveVal = minimax(board, 0, False)
            board[i] = ' '  # Undo the move
            if moveVal > bestVal:
                bestVal = moveVal
                bestMove = i
    return bestMove + 1


def replay():
    """Asks if the players want to play again."""
    return input("Do you want to play again? Enter Yes or No: ").lower().startswith('y')

# Main game loop
print('Welcome to Tic-Tac-Toe!')

while True:
    theBoard = [' '] * 9
    player1_marker, player2_marker = player_input()
    turn = choose_first()
    print(turn + ' will go first.')
    game_on = True

    while game_on:
        if turn == 'Player':
            display_board(theBoard)
            position = get_player_choice(theBoard)
            place_marker(theBoard, player1_marker, position)

            if win_check(theBoard, player1_marker):
                display_board(theBoard)
                print('Congratulations! You have won the game!')
                game_on = False
            else:
                if ' ' not in theBoard:
                    display_board(theBoard)
                    print('The game is a draw!')
                    game_on = False
                else:
                    turn = 'Computer'

        else:  # Computer's turn
            position = find_best_move(theBoard)
            place_marker(theBoard, player2_marker, position)

            if win_check(theBoard, player2_marker):
                display_board(theBoard)
                print('The computer has won!')
                game_on = False
            else:
                if ' ' not in theBoard:
                    display_board(theBoard)
                    print('The game is a draw!')
                    game_on = False
                else:
                    turn = 'Player'

    if not replay():
        break
